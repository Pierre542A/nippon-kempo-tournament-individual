name: Tests Manuels Avanc√©s

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Type de test √† ex√©cuter'
        required: true
        default: 'quick'
        type: choice
        options:
        - quick
        - api-deep
        - frontend-deep
        - full-integration
      target_environment:
        description: 'Environnement √† tester'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - simulate-local
      verbose_logs:
        description: 'Logs d√©taill√©s'
        required: false
        default: false
        type: boolean

jobs:
  # Job de configuration
  test-setup:
    name: "üîß Test Configuration"
    runs-on: ubuntu-latest
    outputs:
      api_url: ${{ steps.config.outputs.api_url }}
      frontend_url: ${{ steps.config.outputs.frontend_url }}
      test_api: ${{ steps.config.outputs.test_api }}
      test_frontend: ${{ steps.config.outputs.test_frontend }}
      test_integration: ${{ steps.config.outputs.test_integration }}
    
    steps:
    - name: üîß Configure test environment
      id: config
      run: |
        echo "üß™ Manual testing initiated..."
        echo "üë§ Triggered by: ${{ github.actor }}"
        echo "üïê Time: $(date)"
        echo "üìã Scope: ${{ github.event.inputs.test_scope }}"
        echo "üåç Environment: ${{ github.event.inputs.target_environment }}"
        echo "üìù Verbose: ${{ github.event.inputs.verbose_logs }}"
        echo ""
        
        # Configuration URLs selon l'environnement
        if [ "${{ github.event.inputs.target_environment }}" = "production" ]; then
          echo "api_url=https://nippon-kempo-tournament-individualcube3.onrender.com" >> $GITHUB_OUTPUT
          echo "frontend_url=https://nippon-kempo-tournament-front.onrender.com" >> $GITHUB_OUTPUT
          echo "üåê Testing PRODUCTION environment"
        else
          echo "api_url=http://localhost:3000" >> $GITHUB_OUTPUT
          echo "frontend_url=http://localhost:8080" >> $GITHUB_OUTPUT
          echo "üñ•Ô∏è Simulating LOCAL environment"
        fi
        
        # Configuration des tests selon le scope
        case "${{ github.event.inputs.test_scope }}" in
          "quick")
            echo "test_api=basic" >> $GITHUB_OUTPUT
            echo "test_frontend=basic" >> $GITHUB_OUTPUT
            echo "test_integration=false" >> $GITHUB_OUTPUT
            echo "‚ö° Quick tests configured"
            ;;
          "api-deep")
            echo "test_api=deep" >> $GITHUB_OUTPUT
            echo "test_frontend=false" >> $GITHUB_OUTPUT
            echo "test_integration=false" >> $GITHUB_OUTPUT
            echo "üîç Deep API tests configured"
            ;;
          "frontend-deep")
            echo "test_api=false" >> $GITHUB_OUTPUT
            echo "test_frontend=deep" >> $GITHUB_OUTPUT
            echo "test_integration=false" >> $GITHUB_OUTPUT
            echo "üñ•Ô∏è Deep Frontend tests configured"
            ;;
          "full-integration")
            echo "test_api=deep" >> $GITHUB_OUTPUT
            echo "test_frontend=deep" >> $GITHUB_OUTPUT
            echo "test_integration=true" >> $GITHUB_OUTPUT
            echo "üîó Full integration tests configured"
            ;;
        esac

  # Tests API conditionnels
  api-tests:
    name: "üß™ API Testing"
    runs-on: ubuntu-latest
    needs: test-setup
    if: needs.test-setup.outputs.test_api != 'false'
    
    steps:
    - name: üß™ Basic API tests
      if: needs.test-setup.outputs.test_api == 'basic'
      run: |
        echo "‚ö° Running basic API tests..."
        API_URL="${{ needs.test-setup.outputs.api_url }}"
        
        echo "1. üîç Health check..."
        if curl -f -s "$API_URL/health" >/dev/null; then
          echo "‚úÖ API health check passed"
        else
          echo "‚ùå API health check failed"
        fi
        
        echo "2. üèÜ Tournaments endpoint..."
        if curl -f -s "$API_URL/api/tournaments" >/dev/null; then
          echo "‚úÖ Tournaments endpoint accessible"
        else
          echo "‚ùå Tournaments endpoint failed"
        fi
        
        echo "‚úÖ Basic API tests completed"
    
    - name: üîç Deep API tests
      if: needs.test-setup.outputs.test_api == 'deep'
      run: |
        echo "üîç Running deep API tests..."
        API_URL="${{ needs.test-setup.outputs.api_url }}"
        
        echo "1. üîç Health check with details..."
        HEALTH_RESPONSE=$(curl -s "$API_URL/health" 2>/dev/null)
        if [ $? -eq 0 ]; then
          echo "‚úÖ API health check passed"
          if [ "${{ github.event.inputs.verbose_logs }}" = "true" ]; then
            echo "Response: $HEALTH_RESPONSE"
          fi
        else
          echo "‚ùå API health check failed"
        fi
        
        echo "2. üèÜ Tournaments with data validation..."
        TOURNAMENTS_RESPONSE=$(curl -s "$API_URL/api/tournaments" 2>/dev/null)
        if [ $? -eq 0 ]; then
          echo "‚úÖ Tournaments endpoint accessible"
          
          # V√©rifier que c'est du JSON valide
          if echo "$TOURNAMENTS_RESPONSE" | jq . >/dev/null 2>&1; then
            echo "‚úÖ Valid JSON response"
            TOURNAMENT_COUNT=$(echo "$TOURNAMENTS_RESPONSE" | jq 'length' 2>/dev/null || echo "0")
            echo "üìä Found $TOURNAMENT_COUNT tournaments"
          else
            echo "‚ö†Ô∏è Invalid JSON response"
          fi
        else
          echo "‚ùå Tournaments endpoint failed"
        fi
        
        echo "3. üë§ User registration test..."
        TEST_EMAIL="manual-test-$(date +%s)@test.com"
        REGISTER_RESPONSE=$(curl -X POST "$API_URL/api/auth/register" \
          -H "Content-Type: application/json" \
          -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"test123\",\"name\":\"Manual Test User\"}" \
          -s 2>/dev/null)
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Registration endpoint accessible"
          if echo "$REGISTER_RESPONSE" | grep -q "token\|success\|user"; then
            echo "‚úÖ Registration appears successful"
          else
            echo "‚ö†Ô∏è Registration response unexpected"
          fi
        else
          echo "‚ö†Ô∏è Registration endpoint test completed"
        fi
        
        echo "4. üîê Authentication test..."
        LOGIN_RESPONSE=$(curl -X POST "$API_URL/api/auth/login" \
          -H "Content-Type: application/json" \
          -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"test123\"}" \
          -s 2>/dev/null)
        
        if [ $? -eq 0 ] && echo "$LOGIN_RESPONSE" | grep -q "token"; then
          echo "‚úÖ Authentication appears to work"
          
          # Extraire le token pour test d'autorisation
          TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.token' 2>/dev/null)
          if [ "$TOKEN" != "null" ] && [ -n "$TOKEN" ]; then
            echo "5. üõ°Ô∏è Protected endpoint test..."
            PROFILE_RESPONSE=$(curl -H "Authorization: Bearer $TOKEN" \
              "$API_URL/api/user/profile" -s 2>/dev/null)
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Protected endpoint accessible with token"
            else
              echo "‚ö†Ô∏è Protected endpoint test completed"
            fi
          fi
        else
          echo "‚ö†Ô∏è Authentication test completed"
        fi
        
        echo "‚úÖ Deep API tests completed"

  # Tests Frontend conditionnels
  frontend-tests:
    name: "üñ•Ô∏è Frontend Testing"
    runs-on: ubuntu-latest
    needs: test-setup
    if: needs.test-setup.outputs.test_frontend != 'false'
    
    steps:
    - name: üñ•Ô∏è Basic Frontend tests
      if: needs.test-setup.outputs.test_frontend == 'basic'
      run: |
        echo "‚ö° Running basic Frontend tests..."
        FRONTEND_URL="${{ needs.test-setup.outputs.frontend_url }}"
        
        echo "1. üîç Accessibility check..."
        if curl -f -s "$FRONTEND_URL" >/dev/null; then
          echo "‚úÖ Frontend is accessible"
        else
          echo "‚ùå Frontend accessibility failed"
        fi
        
        echo "‚úÖ Basic Frontend tests completed"
    
    - name: üîç Deep Frontend tests
      if: needs.test-setup.outputs.test_frontend == 'deep'
      run: |
        echo "üîç Running deep Frontend tests..."
        FRONTEND_URL="${{ needs.test-setup.outputs.frontend_url }}"
        
        echo "1. üîç Main page accessibility..."
        CONTENT=$(curl -s "$FRONTEND_URL" 2>/dev/null)
        if [ $? -eq 0 ]; then
          echo "‚úÖ Frontend main page accessible"
          
          echo "2. üé® Content verification..."
          if echo "$CONTENT" | grep -qi "nippon.*kempo\|tournament\|kempo.*tournament"; then
            echo "‚úÖ Expected content found"
          else
            echo "‚ö†Ô∏è Expected content not found"
          fi
          
          echo "3. üìú JavaScript assets check..."
          if echo "$CONTENT" | grep -q "script\|\.js"; then
            echo "‚úÖ JavaScript assets detected"
          else
            echo "‚ö†Ô∏è No JavaScript assets found"
          fi
          
          echo "4. üé® CSS assets check..."
          if echo "$CONTENT" | grep -q "stylesheet\|\.css\|style"; then
            echo "‚úÖ CSS assets detected"
          else
            echo "‚ö†Ô∏è No CSS assets found"
          fi
          
          echo "5. ‚ö° Vue.js/Quasar detection..."
          if echo "$CONTENT" | grep -qi "vue\|quasar"; then
            echo "‚úÖ Vue.js/Quasar framework detected"
          else
            echo "‚ö†Ô∏è Framework not explicitly detected"
          fi
          
          if [ "${{ github.event.inputs.verbose_logs }}" = "true" ]; then
            echo "üìù Page content sample (first 500 chars):"
            echo "$CONTENT" | head -c 500
            echo ""
          fi
          
        else
          echo "‚ùå Frontend main page not accessible"
        fi
        
        echo "‚úÖ Deep Frontend tests completed"

  # Tests d'int√©gration
  integration-tests:
    name: "üîó Integration Testing"
    runs-on: ubuntu-latest
    needs: [test-setup, api-tests, frontend-tests]
    if: needs.test-setup.outputs.test_integration == 'true'
    
    steps:
    - name: üîó Full stack integration tests
      run: |
        echo "üîó Running full integration tests..."
        API_URL="${{ needs.test-setup.outputs.api_url }}"
        FRONTEND_URL="${{ needs.test-setup.outputs.frontend_url }}"
        
        echo "1. üåê Cross-origin communication test..."
        
        echo "2. üìä Data flow test..."
        # Test que l'API retourne des donn√©es que le frontend peut utiliser
        API_DATA=$(curl -s "$API_URL/api/tournaments" 2>/dev/null)
        if echo "$API_DATA" | jq . >/dev/null 2>&1; then
          echo "‚úÖ API returns valid JSON data"
          
          # V√©rifier structure des donn√©es
          if echo "$API_DATA" | jq -e 'type == "array"' >/dev/null 2>&1; then
            echo "‚úÖ Tournaments data is properly formatted array"
          elif echo "$API_DATA" | jq -e 'has("tournaments")' >/dev/null 2>&1; then
            echo "‚úÖ Tournaments data has expected structure"
          else
            echo "‚ö†Ô∏è Tournaments data structure unknown but valid JSON"
          fi
        else
          echo "‚ö†Ô∏è API data format validation failed"
        fi
        
        echo "3. üîÑ End-to-end availability test..."
        API_AVAILABLE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/health" 2>/dev/null)
        FRONTEND_AVAILABLE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" 2>/dev/null)
        
        echo "üìä Status codes:"
        echo "- API: $API_AVAILABLE"
        echo "- Frontend: $FRONTEND_AVAILABLE"
        
        if [ "$API_AVAILABLE" = "200" ] && [ "$FRONTEND_AVAILABLE" = "200" ]; then
          echo "‚úÖ Full stack is fully operational"
        else
          echo "‚ö†Ô∏è Some components may have issues"
        fi
        
        echo "‚úÖ Integration tests completed"

  # Rapport final
  test-report:
    name: "üìä Test Report"
    runs-on: ubuntu-latest
    needs: [test-setup, api-tests, frontend-tests, integration-tests]
    if: always()
    
    steps:
    - name: üìä Generate test report
      run: |
        echo "üìä ===== MANUAL TEST REPORT ====="
        echo ""
        echo "üïê Executed at: $(date)"
        echo "üë§ Triggered by: ${{ github.actor }}"
        echo "üìã Test scope: ${{ github.event.inputs.test_scope }}"
        echo "üåç Environment: ${{ github.event.inputs.target_environment }}"
        echo ""
        
        echo "üìä Test Results:"
        echo "- Setup: ${{ needs.test-setup.result }}"
        echo "- API Tests: ${{ needs.api-tests.result }}"
        echo "- Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"
        echo ""
        
        # URLs test√©es
        echo "üåê URLs tested:"
        echo "- Frontend: ${{ needs.test-setup.outputs.frontend_url }}"
        echo "- API: ${{ needs.test-setup.outputs.api_url }}"
        echo ""
        
        # Recommandations bas√©es sur les r√©sultats
        if [ "${{ needs.api-tests.result }}" = "success" ] && [ "${{ needs.frontend-tests.result }}" = "success" ]; then
          echo "üéâ All tests passed successfully!"
          echo "‚úÖ Your application appears to be functioning correctly"
        else
          echo "‚ö†Ô∏è Some tests encountered issues"
          echo "üîç Check the logs above for detailed information"
          echo "üí° Consider running individual test scopes for detailed debugging"
        fi
        
        echo ""
        echo "üìù Available test scopes for future runs:"
        echo "- quick: Fast health checks (5 min)"
        echo "- api-deep: Detailed API testing (10 min)"
        echo "- frontend-deep: Detailed Frontend testing (8 min)"
        echo "- full-integration: Complete system test (15 min)"
        echo ""
        echo "=============================="
name: CI Pipeline - Tests Complets

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1 : Tests complets de l'API avec vraie base de données
  test-api-complete:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
    
    - name: Install API dependencies
      run: |
        cd api
        npm ci
    
    - name: Wait for MySQL and setup
      run: |
        # Attendre que MySQL soit prêt
        timeout 120 bash -c 'until mysqladmin ping -h 127.0.0.1 --silent; do sleep 2; done'
        echo "✅ MySQL is ready"
        
        # Créer les bases de test
        mysql -h 127.0.0.1 -u root -prootpassword -e "
        CREATE DATABASE IF NOT EXISTS test_db;
        CREATE DATABASE IF NOT EXISTS test_db_integration;
        SHOW DATABASES;
        "
    
    - name: Test Database Connection
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLUSER: root
        MYSQLPASSWORD: rootpassword
        MYSQLDATABASE: test_db
        NODE_ENV: test
        JWT_SECRET: test-secret-for-ci
        COOKIE_SECRET: test-cookie-secret-with-at-least-32-characters
      run: |
        cd api
        node -e "
        const mysql = require('mysql2/promise');
        async function testConnection() {
          try {
            const connection = await mysql.createConnection({
              host: process.env.MYSQLHOST,
              user: process.env.MYSQLUSER,
              password: process.env.MYSQLPASSWORD,
              database: process.env.MYSQLDATABASE
            });
            console.log('✅ Database connection successful');
            
            // Test basic query
            const [rows] = await connection.execute('SELECT 1 as test');
            console.log('✅ Basic query successful:', rows[0]);
            
            await connection.end();
          } catch(error) {
            console.error('❌ Database connection failed:', error.message);
            process.exit(1);
          }
        }
        testConnection();
        "
    
    - name: Setup Database Schema
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLUSER: root
        MYSQLPASSWORD: rootpassword
        MYSQLDATABASE: test_db
      run: |
        cd api
        # Créer les tables de base (adaptez selon votre schéma)
        mysql -h 127.0.0.1 -u root -prootpassword test_db -e "
        CREATE TABLE IF NOT EXISTS users (
          id INT PRIMARY KEY AUTO_INCREMENT,
          email VARCHAR(255) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          name VARCHAR(100),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS tournaments (
          id INT PRIMARY KEY AUTO_INCREMENT,
          name VARCHAR(255) NOT NULL,
          date DATE,
          location VARCHAR(255),
          status ENUM('upcoming', 'ongoing', 'completed') DEFAULT 'upcoming',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS registrations (
          id INT PRIMARY KEY AUTO_INCREMENT,
          user_id INT,
          tournament_id INT,
          category VARCHAR(100),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id),
          FOREIGN KEY (tournament_id) REFERENCES tournaments(id)
        );
        
        -- Insérer des données de test
        INSERT INTO tournaments (name, date, location, status) VALUES 
        ('Test Tournament 1', '2025-08-01', 'Paris', 'upcoming'),
        ('Test Tournament 2', '2025-09-15', 'Lyon', 'upcoming');
        
        SHOW TABLES;
        "
        echo "✅ Database schema created"
    
    - name: Start API Server
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLUSER: root
        MYSQLPASSWORD: rootpassword
        MYSQLDATABASE: test_db
        NODE_ENV: test
        JWT_SECRET: test-secret-for-ci
        COOKIE_SECRET: test-cookie-secret-with-at-least-32-characters
        MJ_APIKEY_PUBLIC: test_key
        MJ_APIKEY_PRIVATE: test_key
        PORT: 3000
      run: |
        cd api
        # Démarrer l'API en arrière-plan
        npm start &
        API_PID=$!
        echo $API_PID > api.pid
        
        # Attendre que l'API soit prête
        echo "Waiting for API to start..."
        for i in {1..30}; do
          if curl -s http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ API is ready"
            break
          fi
          echo "Attempt $i/30: API not ready yet..."
          sleep 2
        done
    
    - name: Test API Routes
      run: |
        echo "🧪 Testing API endpoints..."
        
        # Test health endpoint
        echo "Testing /health endpoint..."
        curl -f http://localhost:3000/health || echo "❌ Health endpoint failed"
        
        # Test tournaments endpoint
        echo "Testing /api/tournaments endpoint..."
        curl -f http://localhost:3000/api/tournaments || echo "❌ Tournaments endpoint failed"
        
        # Test user registration
        echo "Testing user registration..."
        curl -X POST http://localhost:3000/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@test.com","password":"test123","name":"Test User"}' \
          || echo "❌ Registration failed"
        
        # Test user login
        echo "Testing user login..."
        TOKEN=$(curl -X POST http://localhost:3000/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"test@test.com","password":"test123"}' \
          | grep -o '"token":"[^"]*"' | cut -d'"' -f4) || echo "❌ Login failed"
        
        if [ -n "$TOKEN" ]; then
          echo "✅ Login successful, token received"
          
          # Test protected route
          echo "Testing protected route..."
          curl -H "Authorization: Bearer $TOKEN" \
            http://localhost:3000/api/user/profile || echo "❌ Protected route failed"
        fi
    
    - name: Test Database Operations
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLUSER: root
        MYSQLPASSWORD: rootpassword
        MYSQLDATABASE: test_db
      run: |
        echo "🧪 Testing database operations..."
        
        # Vérifier que les données ont été insérées
        TOURNAMENT_COUNT=$(mysql -h 127.0.0.1 -u root -prootpassword test_db -sN -e "SELECT COUNT(*) FROM tournaments;")
        echo "Tournaments in database: $TOURNAMENT_COUNT"
        
        if [ "$TOURNAMENT_COUNT" -gt 0 ]; then
          echo "✅ Database operations working"
        else
          echo "❌ No tournaments found in database"
        fi
        
        # Test des requêtes complexes
        mysql -h 127.0.0.1 -u root -prootpassword test_db -e "
        SELECT t.name, t.date, t.status, COUNT(r.id) as registrations
        FROM tournaments t
        LEFT JOIN registrations r ON t.id = r.tournament_id
        GROUP BY t.id;
        " || echo "❌ Complex query failed"
    
    - name: Cleanup API
      if: always()
      run: |
        if [ -f api/api.pid ]; then
          API_PID=$(cat api/api.pid)
          kill $API_PID 2>/dev/null || echo "API already stopped"
          rm api/api.pid
        fi

  # Job 2 : Tests complets du Frontend
  test-frontend-complete:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: front-quasar/package-lock.json
    
    - name: Install Frontend dependencies
      run: |
        cd front-quasar
        npm ci
    
    - name: Test Environment Configuration
      env:
        VITE_API_URL: http://localhost:3000
      run: |
        cd front-quasar
        echo "🧪 Testing environment configuration..."
        echo "API URL: $VITE_API_URL"
        
        # Vérifier la configuration Quasar
        node -e "
        const config = require('./quasar.config.js');
        console.log('✅ Quasar config loaded successfully');
        console.log('Build mode:', config.build?.target || 'default');
        "
    
    - name: Test Component Structure
      run: |
        cd front-quasar
        echo "🧪 Testing component structure..."
        
        # Vérifier les fichiers critiques
        test -f src/App.vue && echo "✅ App.vue found" || echo "❌ App.vue missing"
        test -f src/router/routes.js && echo "✅ Routes found" || echo "❌ Routes missing"
        test -f src/pages/IndexPage.vue && echo "✅ IndexPage found" || echo "❌ IndexPage missing"
        
        # Vérifier la structure des dossiers
        test -d src/components && echo "✅ Components directory found" || echo "❌ Components directory missing"
        test -d src/services && echo "✅ Services directory found" || echo "❌ Services directory missing"
        
        # Compter les composants
        COMPONENT_COUNT=$(find src/components -name "*.vue" 2>/dev/null | wc -l)
        echo "Components found: $COMPONENT_COUNT"
    
    - name: Build Frontend
      env:
        VITE_API_URL: http://localhost:3000
      run: |
        cd front-quasar
        echo "🧪 Building frontend..."
        npm run build
        
        # Vérifier que le build a généré les fichiers
        test -f dist/spa/index.html && echo "✅ Build successful - index.html generated" || echo "❌ Build failed"
        test -d dist/spa/assets && echo "✅ Assets directory generated" || echo "❌ Assets missing"
        
        # Vérifier la taille du build
        BUILD_SIZE=$(du -sh dist/spa | cut -f1)
        echo "Build size: $BUILD_SIZE"
    
    - name: Test Frontend Routes
      run: |
        cd front-quasar
        echo "🧪 Testing frontend routes..."
        
        # Analyser les routes définies
        if [ -f src/router/routes.js ]; then
          node -e "
          const routes = require('./src/router/routes.js');
          console.log('✅ Routes loaded:', routes.length || 'unknown count');
          " || echo "❌ Routes analysis failed"
        fi
    
    - name: Test Static Files
      run: |
        cd front-quasar
        echo "🧪 Testing static files..."
        
        # Vérifier que les assets sont présents
        if [ -d src/assets ]; then
          ASSET_COUNT=$(find src/assets -type f 2>/dev/null | wc -l)
          echo "Assets found: $ASSET_COUNT"
        fi
        
        # Vérifier les fichiers de configuration
        test -f package.json && echo "✅ Package.json found" || echo "❌ Package.json missing"
        test -f quasar.config.js && echo "✅ Quasar config found" || echo "❌ Quasar config missing"

  # Job 3 : Tests d'intégration complets
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-api-complete, test-frontend-complete]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: integration_test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Integration Environment
      run: |
        # Installer les dépendances
        cd api && npm ci &
        cd front-quasar && npm ci &
        wait
        
        # Attendre MySQL
        timeout 120 bash -c 'until mysqladmin ping -h 127.0.0.1 --silent; do sleep 2; done'
        
        # Setup base de données
        mysql -h 127.0.0.1 -u root -prootpassword -e "
        CREATE DATABASE IF NOT EXISTS integration_test_db;
        USE integration_test_db;
        CREATE TABLE tournaments (id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255), date DATE);
        INSERT INTO tournaments (name, date) VALUES ('Integration Test Tournament', '2025-08-01');
        "
    
    - name: Full Stack Integration Test
      env:
        MYSQLHOST: 127.0.0.1
        MYSQLUSER: root
        MYSQLPASSWORD: rootpassword
        MYSQLDATABASE: integration_test_db
        NODE_ENV: test
        JWT_SECRET: integration-test-secret
        COOKIE_SECRET: integration-test-cookie-secret-32-chars
        MJ_APIKEY_PUBLIC: test_key
        MJ_APIKEY_PRIVATE: test_key
        VITE_API_URL: http://localhost:3000
      run: |
        echo "🧪 Starting full stack integration test..."
        
        # Démarrer l'API
        cd api
        npm start &
        API_PID=$!
        
        # Démarrer le frontend
        cd ../front-quasar
        npm run build
        npx http-server dist/spa -p 8080 &
        FRONTEND_PID=$!
        
        # Attendre que tout soit prêt
        sleep 15
        
        echo "Testing full stack communication..."
        
        # Test API
        curl -f http://localhost:3000/health && echo "✅ API responding" || echo "❌ API not responding"
        
        # Test Frontend
        curl -f http://localhost:8080 && echo "✅ Frontend responding" || echo "❌ Frontend not responding"
        
        # Test API data
        TOURNAMENT_DATA=$(curl -s http://localhost:3000/api/tournaments)
        echo "Tournament data: $TOURNAMENT_DATA"
        
        # Cleanup
        kill $API_PID $FRONTEND_PID 2>/dev/null || true

  # Job 4 : Code Quality et Sécurité
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd api && npm ci &
        cd front-quasar && npm ci &
        wait
    
    - name: Code Quality Checks
      run: |
        echo "🧪 Running code quality checks..."
        
        # API Linting
        cd api
        npm run lint || echo "⚠️ API lint completed with warnings"
        
        # Frontend Linting
        cd ../front-quasar
        npm run lint || echo "⚠️ Frontend lint completed with warnings"
    
    - name: Security Audits
      run: |
        echo "🔒 Running security audits..."
        
        # API Security
        cd api
        npm audit --audit-level moderate || echo "⚠️ API audit completed"
        
        # Frontend Security
        cd ../front-quasar
        npm audit --audit-level moderate || echo "⚠️ Frontend audit completed"
    
    - name: Dependency Check
      run: |
        echo "📦 Checking dependencies..."
        
        cd api
        echo "API dependencies:"
        npm ls --depth=0 || echo "API dependencies listed"
        
        cd ../front-quasar
        echo "Frontend dependencies:"
        npm ls --depth=0 || echo "Frontend dependencies listed"
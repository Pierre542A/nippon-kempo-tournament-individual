name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Permet d√©clenchement manuel

jobs:
  # Job 1 : Pr√©-v√©rifications intelligentes
  pre-deploy:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      api_changed: ${{ steps.changes.outputs.api_changed }}
      frontend_changed: ${{ steps.changes.outputs.frontend_changed }}
      deploy_reason: ${{ steps.changes.outputs.deploy_reason }}
    
    steps:
    - name: Checkout with history
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Analyze changes
      id: changes
      run: |
        echo "üîç Analyzing changes..."
        
        # D√©tecter les changements
        API_CHANGES=$(git diff --name-only HEAD^ HEAD | grep -E "^api/" | wc -l)
        FRONTEND_CHANGES=$(git diff --name-only HEAD^ HEAD | grep -E "^front-quasar/" | wc -l)
        CONFIG_CHANGES=$(git diff --name-only HEAD^ HEAD | grep -E "^(docker-compose\.yml|\.env\.example|package\.json)$" | wc -l)
        
        echo "API changes: $API_CHANGES"
        echo "Frontend changes: $FRONTEND_CHANGES"  
        echo "Config changes: $CONFIG_CHANGES"
        
        # D√©cider si d√©ploiement n√©cessaire
        TOTAL_CHANGES=$((API_CHANGES + FRONTEND_CHANGES + CONFIG_CHANGES))
        
        if [ $TOTAL_CHANGES -gt 0 ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "deploy_reason=Code changes detected ($TOTAL_CHANGES files)" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
          echo "deploy_reason=No relevant changes" >> $GITHUB_OUTPUT
        fi
        
        echo "api_changed=$([ $API_CHANGES -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "frontend_changed=$([ $FRONTEND_CHANGES -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
    
    - name: Deployment decision
      run: |
        echo "üìã Deployment Analysis:"
        echo "Should deploy: ${{ steps.changes.outputs.should_deploy }}"
        echo "Reason: ${{ steps.changes.outputs.deploy_reason }}"
        echo "API changed: ${{ steps.changes.outputs.api_changed }}"
        echo "Frontend changed: ${{ steps.changes.outputs.frontend_changed }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Commit: ${{ github.sha }}"

  # Job 2 : D√©ploiement conditionnel
  deploy:
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    
    steps:
    - name: Deployment notification
      run: |
        echo "üöÄ Starting deployment..."
        echo "Reason: ${{ needs.pre-deploy.outputs.deploy_reason }}"
        echo "Components to deploy:"
        echo "- API: ${{ needs.pre-deploy.outputs.api_changed }}"
        echo "- Frontend: ${{ needs.pre-deploy.outputs.frontend_changed }}"
    
    - name: Wait for Render auto-deployment
      run: |
        echo "‚è≥ Waiting for Render auto-deployment..."
        echo "Render will automatically deploy based on this main branch push"
        
        # Attendre le d√©ploiement (ajustez selon vos observations)
        if [ "${{ needs.pre-deploy.outputs.api_changed }}" = "true" ]; then
          echo "API deployment expected - waiting 120 seconds"
          sleep 120
        else
          echo "Only frontend deployment expected - waiting 60 seconds"
          sleep 60
        fi

  # Job 3 : Tests post-d√©ploiement robustes
  post-deploy-verification:
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    
    steps:
    - name: API Health Verification
      run: |
        echo "üîç Verifying API deployment..."
        
        API_URL="https://nippon-kempo-tournament-individualcube3.onrender.com"
        
        for attempt in {1..10}; do
          echo "Attempt $attempt/10: Testing API health..."
          
          if curl -f -s "$API_URL/health" > /dev/null; then
            echo "‚úÖ API health check passed"
            
            # Test API endpoints
            echo "Testing API endpoints..."
            curl -f "$API_URL/api/tournaments" > /dev/null && echo "‚úÖ Tournaments endpoint OK" || echo "‚ö†Ô∏è Tournaments endpoint issue"
            break
          else
            echo "‚è≥ API not ready yet, waiting 30 seconds..."
            sleep 30
          fi
          
          if [ $attempt -eq 10 ]; then
            echo "‚ùå API health check failed after 10 attempts"
            exit 1
          fi
        done
    
    - name: Frontend Health Verification
      run: |
        echo "üîç Verifying Frontend deployment..."
        
        FRONTEND_URL="https://nippon-kempo-tournament-front.onrender.com"
        
        for attempt in {1..10}; do
          echo "Attempt $attempt/10: Testing Frontend..."
          
          if curl -f -s "$FRONTEND_URL" > /dev/null; then
            echo "‚úÖ Frontend health check passed"
            
            # V√©rifier que le contenu est correct
            CONTENT=$(curl -s "$FRONTEND_URL")
            if echo "$CONTENT" | grep -q "Nippon Kempo"; then
              echo "‚úÖ Frontend content verification passed"
            else
              echo "‚ö†Ô∏è Frontend content verification failed"
            fi
            break
          else
            echo "‚è≥ Frontend not ready yet, waiting 30 seconds..."
            sleep 30
          fi
          
          if [ $attempt -eq 10 ]; then
            echo "‚ùå Frontend health check failed after 10 attempts"
            exit 1
          fi
        done
    
    - name: Integration Test Post-Deploy
      run: |
        echo "üîó Testing API-Frontend integration..."
        
        API_URL="https://nippon-kempo-tournament-individualcube3.onrender.com"
        
        # Test que l'API retourne des donn√©es valides
        TOURNAMENTS=$(curl -s "$API_URL/api/tournaments")
        if echo "$TOURNAMENTS" | grep -q "tournament\|id\|name"; then
          echo "‚úÖ API returns valid tournament data"
        else
          echo "‚ö†Ô∏è API tournament data may have issues"
        fi

  # Job 4 : Notifications et rapports
  deployment-report:
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy, post-deploy-verification]
    if: always()
    
    steps:
    - name: Success Report
      if: needs.post-deploy-verification.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo ""
        echo "üìä Deployment Summary:"
        echo "- Reason: ${{ needs.pre-deploy.outputs.deploy_reason }}"
        echo "- API changed: ${{ needs.pre-deploy.outputs.api_changed }}"
        echo "- Frontend changed: ${{ needs.pre-deploy.outputs.frontend_changed }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Author: ${{ github.actor }}"
        echo ""
        echo "üåê Live URLs:"
        echo "- Frontend: https://nippon-kempo-tournament-front.onrender.com"
        echo "- API: https://nippon-kempo-tournament-individualcube3.onrender.com"
    
    - name: Failure Report
      if: needs.deploy.result == 'failure' || needs.post-deploy-verification.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo ""
        echo "üîç Troubleshooting steps:"
        echo "1. Check Render deployment logs"
        echo "2. Verify environment variables"
        echo "3. Check database connectivity"
        echo "4. Review recent code changes"
        echo ""
        echo "üìù Failed deployment details:"
        echo "- Commit: ${{ github.sha }}"
        echo "- Author: ${{ github.actor }}"
        echo "- Deploy job: ${{ needs.deploy.result }}"
        echo "- Verification job: ${{ needs.post-deploy-verification.result }}"
    
    - name: Skip Report
      if: needs.pre-deploy.outputs.should_deploy == 'false'
      run: |
        echo "‚è≠Ô∏è Deployment skipped"
        echo "Reason: ${{ needs.pre-deploy.outputs.deploy_reason }}"
        echo "No relevant changes detected in this commit."
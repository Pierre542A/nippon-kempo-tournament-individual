name: CD.YML Pipeline - Tests Complets
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without changes'
        required: false
        default: false
        type: boolean

jobs:
  # Job 1 : Analyser les changements
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      api_changed: ${{ steps.changes.outputs.api_changed }}
      frontend_changed: ${{ steps.changes.outputs.frontend_changed }}
      changes_summary: ${{ steps.changes.outputs.changes_summary }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Analyze changes
      id: changes
      run: |
        echo "🔍 Analyzing changes..."
        
        if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
          echo "🔄 Force deployment requested"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "api_changed=true" >> $GITHUB_OUTPUT
          echo "frontend_changed=true" >> $GITHUB_OUTPUT
          echo "changes_summary=Manual force deployment" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Détection des changements depuis le dernier commit
        API_FILES=$(git diff --name-only HEAD^ HEAD | grep "^api/" | wc -l)
        FRONTEND_FILES=$(git diff --name-only HEAD^ HEAD | grep "^front-quasar/" | wc -l)
        CONFIG_FILES=$(git diff --name-only HEAD^ HEAD | grep -E "^(docker-compose\.yml|\.env\.example|package\.json)$" | wc -l)
        
        echo "Files changed - API: $API_FILES, Frontend: $FRONTEND_FILES, Config: $CONFIG_FILES"
        
        # Décisions de déploiement
        if [ $API_FILES -gt 0 ]; then
          echo "api_changed=true" >> $GITHUB_OUTPUT
        else
          echo "api_changed=false" >> $GITHUB_OUTPUT
        fi
        
        if [ $FRONTEND_FILES -gt 0 ]; then
          echo "frontend_changed=true" >> $GITHUB_OUTPUT
        else
          echo "frontend_changed=false" >> $GITHUB_OUTPUT
        fi
        
        TOTAL_RELEVANT=$((API_FILES + FRONTEND_FILES + CONFIG_FILES))
        if [ $TOTAL_RELEVANT -gt 0 ]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "changes_summary=$TOTAL_RELEVANT relevant files changed" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
          echo "changes_summary=No deployment-relevant changes" >> $GITHUB_OUTPUT
        fi

  # Job 2 : Déploiement
  deploy:
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should_deploy == 'true'
    
    steps:
    - name: Start deployment
      run: |
        echo "🚀 Starting deployment..."
        echo "Changes: ${{ needs.analyze-changes.outputs.changes_summary }}"
        echo "API will be deployed: ${{ needs.analyze-changes.outputs.api_changed }}"
        echo "Frontend will be deployed: ${{ needs.analyze-changes.outputs.frontend_changed }}"
        echo "Commit: ${{ github.sha }}"
        echo "Triggered by: ${{ github.actor }}"
    
    - name: Wait for Render deployment
      run: |
        echo "⏳ Waiting for Render to auto-deploy..."
        
        # Temps d'attente adaptatif
        if [ "${{ needs.analyze-changes.outputs.api_changed }}" = "true" ] && [ "${{ needs.analyze-changes.outputs.frontend_changed }}" = "true" ]; then
          echo "Both API and Frontend changed - waiting 180 seconds"
          sleep 180
        elif [ "${{ needs.analyze-changes.outputs.api_changed }}" = "true" ]; then
          echo "API changed - waiting 120 seconds"
          sleep 120
        else
          echo "Frontend only - waiting 60 seconds"
          sleep 60
        fi

  # Job 3 : Vérification post-déploiement
  verify:
    runs-on: ubuntu-latest
    needs: [analyze-changes, deploy]
    if: needs.analyze-changes.outputs.should_deploy == 'true'
    
    steps:
    - name: Verify API
      if: needs.analyze-changes.outputs.api_changed == 'true'
      run: |
        echo "🔍 Verifying API deployment..."
        API_URL="https://nippon-kempo-tournament-individualcube3.onrender.com"
        
        for i in {1..10}; do
          if curl -f -s "$API_URL/health" >/dev/null 2>&1; then
            echo "✅ API is responding (attempt $i)"
            break
          elif [ $i -eq 10 ]; then
            echo "❌ API verification failed after 10 attempts"
            exit 1
          else
            echo "⏳ API not ready, attempt $i/10, waiting..."
            sleep 30
          fi
        done
    
    - name: Verify Frontend  
      if: needs.analyze-changes.outputs.frontend_changed == 'true'
      run: |
        echo "🔍 Verifying Frontend deployment..."
        FRONTEND_URL="https://nippon-kempo-tournament-front.onrender.com"
        
        for i in {1..10}; do
          if curl -f -s "$FRONTEND_URL" >/dev/null 2>&1; then
            echo "✅ Frontend is responding (attempt $i)"
            break
          elif [ $i -eq 10 ]; then
            echo "❌ Frontend verification failed after 10 attempts"
            exit 1
          else
            echo "⏳ Frontend not ready, attempt $i/10, waiting..."
            sleep 30
          fi
        done
    
    - name: Final verification
      run: |
        echo "✅ Deployment verification completed successfully!"
        echo "🌐 Live URLs:"
        echo "- API: https://nippon-kempo-tournament-individualcube3.onrender.com"
        echo "- Frontend: https://nippon-kempo-tournament-front.onrender.com"

  # Job 4 : Rapport final
  report:
    runs-on: ubuntu-latest
    needs: [analyze-changes, deploy, verify]
    if: always()
    
    steps:
    - name: Deployment report
      run: |
        if [ "${{ needs.analyze-changes.outputs.should_deploy }}" = "false" ]; then
          echo "⏭️ Deployment skipped: ${{ needs.analyze-changes.outputs.changes_summary }}"
        elif [ "${{ needs.verify.result }}" = "success" ]; then
          echo "🎉 Deployment successful!"
          echo "📊 Summary: ${{ needs.analyze-changes.outputs.changes_summary }}"
        else
          echo "❌ Deployment failed!"
          echo "🔍 Check logs above for details"
        fi